package gov.fac.cacom5.cetad.dronedetector.detector.model;

public class BandpassFilter
{
	private static int length = 0;
	//private static double[] coefficients;
	private static double[] delayLine;
	private static int count = 0;
	
	private static double[] coefficients = new double[]{
			0.00073168795496270642,-0.00047534190528324588,0.00029116422824572381,0.00015901708887920444,-0.00075847004231436677,0.0012681370362159911,
			-0.0014074079240481941,0.00098138643746603616,-3.2619035735999985e-06,-0.0012513622271106228,0.0023040093936717832,-0.0026445888322661191,
			0.0019570644110356037,-0.00030430641139887309,-0.0018207228253067686,0.0036266155206100192,-0.0043129504628123209,0.003414484301841234,
			-0.0010526034668161825,-0.0020318563686128007,0.0047055624953118878,-0.0058664328405889296,0.0049067379277662202,-0.0020121298286615704,
			-0.0018467681964966672,0.0052440149276167664,-0.006857047555173394,0.0060040352317420487,-0.0029524798339033904,-0.0011615501633791677,
			0.0047781369983889762,-0.0065480713482458036,0.0058858753690190346,-0.0031982800450315405,-0.00031766223553992905,0.0032193025271336985,
			-0.0044610022456418293,0.0038375409826198466,-0.0020189487007130592,0.00015806656224874165,0.00073807294600903098,-0.00035938233655928635,
			-0.00072476665590793697,0.0013726373803103634,-0.00053821720682863691,-0.0020282102628601194,0.0054274094693430308,-0.0078555778287633191,
			0.0074124474257140872,-0.0031400162995238552,-0.0042035469884461009,0.012087780491958664,-0.01702686056257317,0.016033898652544416,
			-0.0081243804631326473,-0.0048290423781364895,0.018392789235245278,-0.02706443250931612,0.026471418141753564,-0.015404167044806107,
			-0.0032241129373783476,0.023039397479194881,-0.036398804645743472,0.037358197525596423,-0.02425245027771555,0.0007822513808829611,
			0.024973180022014027,-0.04338707599087499,0.046950162895502842,-0.033349986230454431,0.0066930582647128471,0.023726352401760367,
			-0.046748502132050181,0.053544868321777607,-0.041075846001284839,0.013426356413118732,0.019560830381650053,-0.045889317932212063,
			0.055894411406105009,-0.045889317932212063,0.019560830381650053,0.013426356413118732,-0.041075846001284839,0.053544868321777607,
			-0.046748502132050181,0.023726352401760367,0.0066930582647128471,-0.033349986230454431,0.046950162895502842,-0.04338707599087499,
			0.024973180022014027,0.0007822513808829611,-0.02425245027771555,0.037358197525596423,-0.036398804645743472,0.023039397479194881,
			-0.0032241129373783476,-0.015404167044806107,0.026471418141753564,-0.02706443250931612,0.018392789235245278,-0.0048290423781364895,
			-0.0081243804631326473,0.016033898652544416,-0.01702686056257317,0.012087780491958664,-0.0042035469884461009,-0.0031400162995238552,
			0.0074124474257140872,-0.0078555778287633191,0.0054274094693430308,-0.0020282102628601194,-0.00053821720682863691,0.0013726373803103634,
			-0.00072476665590793697,-0.00035938233655928635,0.00073807294600903098,0.00015806656224874165,-0.0020189487007130592,0.0038375409826198466,
			-0.0044610022456418293,0.0032193025271336985,-0.00031766223553992905,-0.0031982800450315405,0.0058858753690190346,-0.0065480713482458036,
			0.0047781369983889762,-0.0011615501633791677,-0.0029524798339033904,0.0060040352317420487,-0.006857047555173394,0.0052440149276167664,
			-0.0018467681964966672,-0.0020121298286615704,0.0049067379277662202,-0.0058664328405889296,0.0047055624953118878,-0.0020318563686128007,
			-0.0010526034668161825,0.003414484301841234,-0.0043129504628123209,0.0036266155206100192,-0.0018207228253067686,-0.00030430641139887309,
			0.0019570644110356037,-0.0026445888322661191,0.0023040093936717832,-0.0012513622271106228,-3.2619035735999985e-06,0.00098138643746603616,
			-0.0014074079240481941,0.0012681370362159911,-0.00075847004231436677,0.00015901708887920444,0.00029116422824572381,-0.00047534190528324588,
			0.00073168795496270642
	};
	
	public BandpassFilter(double[] coeffs) {
		coefficients = coeffs;
	}

	public BandpassFilter() {

	}
	
	public static double filter(Double inputSample)
	{
		return getOutputSample(inputSample);
	}
	
	public static double[] filter(Double[] inputSamples)
	{
		return getOutputSamples(inputSamples);
	}
	
	public static double getOutputSample(Double inputSample)
	{
		
		delayLine = new double[length];
		delayLine[count] = inputSample;
		double result = 0.0;
		int index = count;
		for (int i=0; i<length; i++) {
			result += coefficients[i] * delayLine[index--];
			if (index < 0) index = length-1;
		}
		if (++count >= length) count = 0;
		return result;
	}
	
	public static double[] getOutputSamples(Double[] inputSamples)
	{
		length = coefficients.length;
		double[] result = new double[inputSamples.length];
		
		for (int i = 0; i < inputSamples.length; i++) {
			result[i] = getOutputSample(inputSamples[i]);
		}
		
		return result;
	}
}
